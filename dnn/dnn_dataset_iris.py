# -*- coding: utf-8 -*-
"""DNN - dataset IRIS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dd12T75RzMsanTd_Q7p68TSlPpIpyn9F
"""

import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt

"""Importo il dataset â†’ Iris"""

#altro metodo (importo il file .csv dal pc)
#from google.colab import files 
#uploaded = files.upload()
#import io
#df = pd.read_csv(io.BytesIO(uploaded['iris.csv']))
#print(df)

import seaborn as sns
iris = sns.load_dataset('iris')
iris.head()

"""Divido in due parti"""

X=iris.iloc[:,0:4]  #prime quattro colonne
Y=iris['species'] #quinta colonna

"""Trasformo in vettore"""

iris['species'].unique()
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)
# convert integers to dummy variables (i.e. one hot encoded)
dummy_y = np_utils.to_categorical(encoded_Y)

X_train, X_test, y_train, y_test = train_test_split(X, dummy_y, test_size=0.33, random_state=42)

"""Definisco la mia rete neurale (il modello della rete)"""

#create model
model = Sequential()
#manca lo strato di input
model.add(Dense(16, input_dim=4, activation='relu')) #primo strato nascosto
model.add(Dense(8, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(3, activation='softmax'))#strato di output
#Compile model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

"""Alleno la mia rete"""

progress = model.fit(X, dummy_y, validation_split=0.33, batch_size=4, epochs=5, shuffle=True)

"""Perdita dell'accuratezza (accuracy) """

plt.plot(progress.history['accuracy'])
plt.plot(progress.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""Perdita dell'errore (loss)"""

plt.plot(progress.history['loss'])
plt.plot(progress.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()